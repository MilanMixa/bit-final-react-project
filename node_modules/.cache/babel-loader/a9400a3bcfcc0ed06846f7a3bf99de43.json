{"ast":null,"code":"export async function getTokenAPI(data) {\n  const tokenEndpoint = \"http://localhost:3333/login\";\n  const response = await fetch(tokenEndpoint, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n\n  if (response.statusText === \"Bad Request\") {\n    throw new Error();\n  }\n\n  return response.json(); // parses JSON response into native JavaScript object\n}\nexport async function getCandidatesAPI(token, validate, setIsLoggedIn) {\n  const candidateEndpoint = \"http://localhost:3333/api/candidates\";\n  const response = await fetch(candidateEndpoint, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  let result = await response.json();\n\n  if (result === \"jwt expired\") {\n    result = await validate(result, setIsLoggedIn);\n  }\n\n  return result;\n}\nexport async function getSingleCandidateInfo(id, token, validate, setIsLoggedIn) {\n  const singleCandidateEndpoint = `http://localhost:3333/api/candidates/${id}`;\n  const response = await fetch(singleCandidateEndpoint, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  let result = await response.json();\n\n  if (result === \"jwt expired\") {\n    result = await validate(result, setIsLoggedIn);\n  }\n\n  return result;\n}\nexport async function getCandidateReportsAPI(token, validate, setIsLoggedIn) {\n  const reportsEndpoint = \"http://localhost:3333/api/reports\";\n  const response = await fetch(reportsEndpoint, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  let result = await response.json();\n  console.log(\"result\", result);\n\n  if (result === \"jwt expired\") {\n    result = await validate(result, setIsLoggedIn);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Mixa/Desktop/interview-reports/src/services/services.js"],"names":["getTokenAPI","data","tokenEndpoint","response","fetch","method","headers","body","JSON","stringify","statusText","Error","json","getCandidatesAPI","token","validate","setIsLoggedIn","candidateEndpoint","Authorization","result","getSingleCandidateInfo","id","singleCandidateEndpoint","getCandidateReportsAPI","reportsEndpoint","console","log"],"mappings":"AAAA,OAAO,eAAeA,WAAf,CAA2BC,IAA3B,EAAiC;AAEtC,QAAMC,aAAa,GAAG,6BAAtB;AACE,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAD,EAAgB;AAC1CG,IAAAA,MAAM,EAAE,MADkC;AAC1B;AAChBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFiC;AAK1CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CALoC,CAKd;;AALc,GAAhB,CAA5B;;AAOA,MAAIE,QAAQ,CAACO,UAAT,KAAwB,aAA5B,EAA2C;AACzC,UAAM,IAAIC,KAAJ,EAAN;AACD;;AACD,SAAOR,QAAQ,CAACS,IAAT,EAAP,CAboC,CAaZ;AAC3B;AAED,OAAO,eAAeC,gBAAf,CAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgE;AACrE,QAAMC,iBAAiB,GAAG,sCAA1B;AACA,QAAMd,QAAQ,GAAG,MAAMC,KAAK,CAACa,iBAAD,EAAoB;AAC9CZ,IAAAA,MAAM,EAAE,KADsC;AAE9CC,IAAAA,OAAO,EAAE;AACPY,MAAAA,aAAa,EAAG,UAASJ,KAAM;AADxB;AAFqC,GAApB,CAA5B;AAMA,MAAIK,MAAM,GAAG,MAAMhB,QAAQ,CAACS,IAAT,EAAnB;;AACA,MAAIO,MAAM,KAAK,aAAf,EAA8B;AAC5BA,IAAAA,MAAM,GAAG,MAAMJ,QAAQ,CAACI,MAAD,EAASH,aAAT,CAAvB;AACD;;AAED,SAAOG,MAAP;AACD;AAED,OAAO,eAAeC,sBAAf,CACLC,EADK,EAELP,KAFK,EAGLC,QAHK,EAILC,aAJK,EAKL;AACA,QAAMM,uBAAuB,GAAI,wCAAuCD,EAAG,EAA3E;AACA,QAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAACkB,uBAAD,EAA0B;AACpDjB,IAAAA,MAAM,EAAE,KAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACPY,MAAAA,aAAa,EAAG,UAASJ,KAAM;AADxB;AAF2C,GAA1B,CAA5B;AAMA,MAAIK,MAAM,GAAG,MAAMhB,QAAQ,CAACS,IAAT,EAAnB;;AACA,MAAIO,MAAM,KAAK,aAAf,EAA8B;AAC5BA,IAAAA,MAAM,GAAG,MAAMJ,QAAQ,CAACI,MAAD,EAASH,aAAT,CAAvB;AACD;;AAED,SAAOG,MAAP;AACD;AAED,OAAO,eAAeI,sBAAf,CAAsCT,KAAtC,EAA6CC,QAA7C,EAAuDC,aAAvD,EAAsE;AAC3E,QAAMQ,eAAe,GAAG,mCAAxB;AACA,QAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACoB,eAAD,EAAkB;AAC5CnB,IAAAA,MAAM,EAAE,KADoC;AAE5CC,IAAAA,OAAO,EAAE;AACPY,MAAAA,aAAa,EAAG,UAASJ,KAAM;AADxB;AAFmC,GAAlB,CAA5B;AAMA,MAAIK,MAAM,GAAG,MAAMhB,QAAQ,CAACS,IAAT,EAAnB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,MAAtB;;AACA,MAAIA,MAAM,KAAK,aAAf,EAA8B;AAC5BA,IAAAA,MAAM,GAAG,MAAMJ,QAAQ,CAACI,MAAD,EAASH,aAAT,CAAvB;AACD;;AAED,SAAOG,MAAP;AACD","sourcesContent":["export async function getTokenAPI(data) {\r\n\r\n  const tokenEndpoint = \"http://localhost:3333/login\";\r\n    const response = await fetch(tokenEndpoint, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n    if (response.statusText === \"Bad Request\") {\r\n      throw new Error();\r\n    }\r\n    return response.json(); // parses JSON response into native JavaScript object\r\n}\r\n\r\nexport async function getCandidatesAPI(token, validate, setIsLoggedIn) {\r\n  const candidateEndpoint = \"http://localhost:3333/api/candidates\";\r\n  const response = await fetch(candidateEndpoint, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  let result = await response.json();\r\n  if (result === \"jwt expired\") {\r\n    result = await validate(result, setIsLoggedIn);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport async function getSingleCandidateInfo(\r\n  id,\r\n  token,\r\n  validate,\r\n  setIsLoggedIn\r\n) {\r\n  const singleCandidateEndpoint = `http://localhost:3333/api/candidates/${id}`;\r\n  const response = await fetch(singleCandidateEndpoint, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  let result = await response.json();\r\n  if (result === \"jwt expired\") {\r\n    result = await validate(result, setIsLoggedIn);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport async function getCandidateReportsAPI(token, validate, setIsLoggedIn) {\r\n  const reportsEndpoint = \"http://localhost:3333/api/reports\";\r\n  const response = await fetch(reportsEndpoint, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  let result = await response.json();\r\n  console.log(\"result\", result);\r\n  if (result === \"jwt expired\") {\r\n    result = await validate(result, setIsLoggedIn);\r\n  }\r\n\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}